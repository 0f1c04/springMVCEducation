<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kosta.emp">

    <!-- 이름이 다를 케이스만 맞춰주기 위해 씀 -->
    <resultMap type="evo" id="empResult">
        <result property="employee_id" column="employee_id"/>
        <result property="first_name" column="first_name"/>
    </resultMap>

    <select id="selectAll" resultType="evo">
        select * from employees order by 1
    </select>
    <select id="selectById" resultType="evo" parameterType="int">
        select * from employees where employee_id = #{bb}
    </select>
    <!-- jdbcType=VARCHAR로 주면 null이여도 varchar 타입이 돼서 입력이 가능함 -->
    <insert id="insert" parameterType="evo">
        insert into employees(employee_id, first_name, last_name, email, phone_number,
                              hire_date, job_id, salary, commission_pct, manager_id, department_id)
        values(#{employee_id},#{first_name},#{last_name},#{email},#{phone_number},
               #{hire_date},#{job_id},#{salary},#{commission_pct},#{manager_id},#{department_id})
    </insert>
    <update id="update" parameterType="evo">
        update employees
        set first_name=#{first_name}, last_name=#{last_name}, email=#{email}, phone_number=#{phone_number},
            hire_date=#{hire_date}, job_id=#{job_id}, salary=#{salary}, commission_pct=#{commission_pct},
            manager_id=#{manager_id}, department_id=#{department_id}
        where employee_id = #{employee_id}
    </update>

    <delete id="delete" parameterType="int">
        delete from employees where employee_id = #{employee_id}
    </delete>

    <select id="loginChk" parameterType="map" resultType="evo">
        select * from employees where employee_id = #{empid} and email=#{email}
    </select>

    <select id="selectAllJobs" resultType="com.kosta.model.JobVO">
        select * from jobs order by 1
    </select>

    <select id="selectByDept" resultType="evo" parameterType="int">
        select * from employees where department_id=#{aa}
    </select>
    <select id="selectBySalary" resultType="evo" parameterType="map">
        select * from employees where salary between #{min} and #{max}
    </select>
    <select id="selectByHireDate" resultType="evo" parameterType="map">
        select * from employees where hire_date between #{sdate} and #{edate}
    </select>
    <select id="selectByHireDate2" resultType="evo" parameterType="map">
        select * from employees where hire_date between #{sdate} and #{edate}
    </select>
    <select id="selectByChar" resultType="evo" parameterType="string">
        select * from employees where first_name like #{aa}
    </select>

    <select id="selectByCondition" resultType="evo" parameterType="map">
        select * from employees
        <where> <!-- test속성에 있는 이름은 map안에 있는 키의 값이다. -->
            <if test="jobid!='' and jobid!=null ">
                job_id = #{jobid}
            </if>
            <if test="deptid!=0 and deptid!=null ">
                and department_id = #{deptid}
            </if>
            <if test="sal!=0 and sal!=null ">
                and salary >= #{sal}
            </if>
            <if test="hdate!=null ">
                and hire_date >= #{hdate}
            </if>
        </where>
        order by employee_id
    </select>

    <sql id="empQuery">
        select * from employees
    </sql>

    <select id="selectByDeptMany" parameterType="java.util.List" resultType="evo">
        <include refid="empQuery"/>
        where department_id in
        <foreach collection="list" index="index" item="deptlist" open="("  separator="," close=")">
            #{deptlist}
        </foreach>
        order by employee_id
    </select>

</mapper>


